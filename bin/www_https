#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var fs = require("fs");
var http = require("http");
var https = require("https");
var privateKey = fs.readFileSync(
  "../certs/private.pem",
  "utf8"
);
var certificate = fs.readFileSync(
  "../certs/file.crt",
  "utf8"
);
var credentials = {
  key: privateKey,
  cert: certificate,
};

/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort("3000");
var httpsPort = normalizePort("3010");

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app.callback());
var httpsServer = https.createServer(credentials, app.callback());

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onHttpsListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpServer.on("error", onError);
httpServer.on("listening", onListening);

httpsServer.listen(httpsPort);
httpsServer.on("error", onError);
httpsServer.on("listening", onHttpsListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(" requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(" is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
